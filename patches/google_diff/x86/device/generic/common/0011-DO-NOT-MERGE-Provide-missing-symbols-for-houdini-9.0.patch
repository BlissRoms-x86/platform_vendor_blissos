From 49fc2fcd8cccffa73dd90f906926e33b610d99e8 Mon Sep 17 00:00:00 2001
From: Michael Goffioul <michael.goffioul@lincor.com>
Date: Fri, 18 Oct 2019 15:17:52 -0400
Subject: [PATCH 11/11] DO NOT MERGE: Provide missing symbols for houdini-9.0.0

Note: does not work, apps still crashing on start
---
 nativebridge/Android.mk    |  1 +
 nativebridge/src/libnb.cpp | 88 ++++++++++++++++++++++++++++----------
 nativebridge/src/libnb.map |  7 +++
 3 files changed, 73 insertions(+), 23 deletions(-)
 create mode 100644 nativebridge/src/libnb.map

diff --git a/nativebridge/Android.mk b/nativebridge/Android.mk
index 0e4922d..70202eb 100644
--- a/nativebridge/Android.mk
+++ b/nativebridge/Android.mk
@@ -16,6 +16,7 @@ LOCAL_MODULE := libnb
 LOCAL_SRC_FILES := src/libnb.cpp
 LOCAL_CFLAGS := -Werror -Wall
 LOCAL_CPPFLAGS := -std=c++11
+LOCAL_LDFLAGS := -Wl,--version-script,$(LOCAL_PATH)/src/libnb.map
 LOCAL_SHARED_LIBRARIES := libcutils libdl liblog
 LOCAL_C_INCLUDES := system/core/libnativebridge/include
 LOCAL_MULTILIB := both
diff --git a/nativebridge/src/libnb.cpp b/nativebridge/src/libnb.cpp
index 4576a30..418f626 100644
--- a/nativebridge/src/libnb.cpp
+++ b/nativebridge/src/libnb.cpp
@@ -12,18 +12,50 @@
  */
 
 #define LOG_TAG "libnb"
+#define LOG_NDEBUG 0
 
 #include <dlfcn.h>
 #include <cutils/log.h>
 #include <cutils/properties.h>
 #include "nativebridge/native_bridge.h"
 
-#define DBG 0
-#if DBG
-#define LOGV ALOGD
-#else
-#define LOGV ALOGV
-#endif
+// Symbols required by libhoudini.so (used to be provided by libdl.so)
+
+extern "C" {
+
+__attribute__((__weak__, visibility("default")))
+int __loader_android_get_application_target_sdk_version();
+
+__attribute__((__weak__, visibility("default")))
+void __loader_android_set_application_target_sdk_version(int target);
+
+__attribute__((__weak__, visibility("default")))
+struct android_namespace_t* __loader_android_get_exported_namespace(const char* name);
+
+__attribute__((__weak__, visibility("default")))
+void __loader_android_update_LD_LIBRARY_PATH(const char* ld_library_path);
+
+__attribute__((__weak__))
+int android_get_application_target_sdk_version() {
+  return __loader_android_get_application_target_sdk_version();
+}
+
+__attribute__((__weak__))
+void android_set_application_target_sdk_version(int target) {
+  __loader_android_set_application_target_sdk_version(target);
+}
+
+__attribute__((__weak__))
+struct android_namespace_t* android_get_exported_namespace(const char* name) {
+  return __loader_android_get_exported_namespace(name);
+}
+
+__attribute__((__weak__))
+void android_update_LD_LIBRARY_PATH(const char* ld_library_path) {
+  __loader_android_update_LD_LIBRARY_PATH(ld_library_path);
+}
+
+};
 
 namespace android {
 
@@ -45,9 +77,19 @@ static NativeBridgeCallbacks *get_callbacks()
 #endif
                 "/libhoudini.so";
         if (!native_handle) {
+            void *libdl = dlopen("libdl.so", RTLD_LAZY);
+            if (!libdl) {
+                ALOGE("Unable to open libdl.so: %s", dlerror());
+            }
+            else {
+                void *android_get_application_target_sdk_version = dlsym(libdl, "android_get_application_target_sdk_version");
+                if (!android_get_application_target_sdk_version) {
+                    ALOGE("Unable to find android_get_application_target_sdk_version: %s", dlerror());
+                }
+            }
             native_handle = dlopen(libnb, RTLD_LAZY);
             if (!native_handle) {
-                ALOGE("Unable to open %s", libnb);
+                ALOGE("Unable to open %s: %s", libnb, dlerror());
                 return nullptr;
             }
         }
@@ -62,7 +104,7 @@ static bool native_bridge2_initialize(const NativeBridgeRuntimeCallbacks *art_cb
                                       const char *app_code_cache_dir,
                                       const char *isa)
 {
-    LOGV("enter native_bridge2_initialize %s %s", app_code_cache_dir, isa);
+    ALOGV("enter native_bridge2_initialize %s %s", app_code_cache_dir, isa);
     if (is_native_bridge_enabled()) {
         if (NativeBridgeCallbacks *cb = get_callbacks()) {
             return cb->initialize(art_cbs, app_code_cache_dir, isa);
@@ -76,7 +118,7 @@ static bool native_bridge2_initialize(const NativeBridgeRuntimeCallbacks *art_cb
 
 static void *native_bridge2_loadLibrary(const char *libpath, int flag)
 {
-    LOGV("enter native_bridge2_loadLibrary %s", libpath);
+    ALOGV("enter native_bridge2_loadLibrary %s", libpath);
     NativeBridgeCallbacks *cb = get_callbacks();
     return cb ? cb->loadLibrary(libpath, flag) : nullptr;
 }
@@ -84,21 +126,21 @@ static void *native_bridge2_loadLibrary(const char *libpath, int flag)
 static void *native_bridge2_getTrampoline(void *handle, const char *name,
                                           const char* shorty, uint32_t len)
 {
-    LOGV("enter native_bridge2_getTrampoline %s", name);
+    ALOGV("enter native_bridge2_getTrampoline %s", name);
     NativeBridgeCallbacks *cb = get_callbacks();
     return cb ? cb->getTrampoline(handle, name, shorty, len) : nullptr;
 }
 
 static bool native_bridge2_isSupported(const char *libpath)
 {
-    LOGV("enter native_bridge2_isSupported %s", libpath);
+    ALOGV("enter native_bridge2_isSupported %s", libpath);
     NativeBridgeCallbacks *cb = get_callbacks();
     return cb ? cb->isSupported(libpath) : false;
 }
 
 static const struct NativeBridgeRuntimeValues *native_bridge2_getAppEnv(const char *abi)
 {
-    LOGV("enter native_bridge2_getAppEnv %s", abi);
+    ALOGV("enter native_bridge2_getAppEnv %s", abi);
     NativeBridgeCallbacks *cb = get_callbacks();
     return cb ? cb->getAppEnv(abi) : nullptr;
 }
@@ -106,7 +148,7 @@ static const struct NativeBridgeRuntimeValues *native_bridge2_getAppEnv(const ch
 static bool native_bridge2_isCompatibleWith(uint32_t version)
 {
     static uint32_t my_version = 0;
-    LOGV("enter native_bridge2_isCompatibleWith %u", version);
+    ALOGV("enter native_bridge2_isCompatibleWith %u", version);
     if (my_version == 0 && is_native_bridge_enabled()) {
         if (NativeBridgeCallbacks *cb = get_callbacks()) {
             my_version = cb->version;
@@ -119,28 +161,28 @@ static bool native_bridge2_isCompatibleWith(uint32_t version)
 
 static NativeBridgeSignalHandlerFn native_bridge2_getSignalHandler(int signal)
 {
-    LOGV("enter native_bridge2_getSignalHandler %d", signal);
+    ALOGV("enter native_bridge2_getSignalHandler %d", signal);
     NativeBridgeCallbacks *cb = get_callbacks();
     return cb ? cb->getSignalHandler(signal) : nullptr;
 }
 
 static int native_bridge3_unloadLibrary(void *handle)
 {
-    LOGV("enter native_bridge3_unloadLibrary %p", handle);
+    ALOGV("enter native_bridge3_unloadLibrary %p", handle);
     NativeBridgeCallbacks *cb = get_callbacks();
     return cb ? cb->unloadLibrary(handle) : -1;
 }
 
 static const char *native_bridge3_getError()
 {
-    LOGV("enter native_bridge3_getError");
+    ALOGV("enter native_bridge3_getError");
     NativeBridgeCallbacks *cb = get_callbacks();
     return cb ? cb->getError() : "unknown";
 }
 
 static bool native_bridge3_isPathSupported(const char *path)
 {
-    LOGV("enter native_bridge3_isPathSupported %s", path);
+    ALOGV("enter native_bridge3_isPathSupported %s", path);
     NativeBridgeCallbacks *cb = get_callbacks();
     return cb && cb->isPathSupported(path);
 }
@@ -148,7 +190,7 @@ static bool native_bridge3_isPathSupported(const char *path)
 static bool native_bridge3_initAnonymousNamespace(const char *public_ns_sonames,
                                                   const char *anon_ns_library_path)
 {
-    LOGV("enter native_bridge3_initAnonymousNamespace %s, %s", public_ns_sonames, anon_ns_library_path);
+    ALOGV("enter native_bridge3_initAnonymousNamespace %s, %s", public_ns_sonames, anon_ns_library_path);
     NativeBridgeCallbacks *cb = get_callbacks();
     return cb && cb->initAnonymousNamespace(public_ns_sonames, anon_ns_library_path);
 }
@@ -161,7 +203,7 @@ native_bridge3_createNamespace(const char *name,
                                const char *permitted_when_isolated_path,
                                native_bridge_namespace_t *parent_ns)
 {
-    LOGV("enter native_bridge3_createNamespace %s, %s, %s, %s", name, ld_library_path, default_library_path, permitted_when_isolated_path);
+    ALOGV("enter native_bridge3_createNamespace %s, %s, %s, %s", name, ld_library_path, default_library_path, permitted_when_isolated_path);
     NativeBridgeCallbacks *cb = get_callbacks();
     return cb ? cb->createNamespace(name, ld_library_path, default_library_path, type, permitted_when_isolated_path, parent_ns) : nullptr;
 }
@@ -170,7 +212,7 @@ static bool native_bridge3_linkNamespaces(native_bridge_namespace_t *from,
                                           native_bridge_namespace_t *to,
                                           const char *shared_libs_soname)
 {
-    LOGV("enter native_bridge3_linkNamespaces %s", shared_libs_soname);
+    ALOGV("enter native_bridge3_linkNamespaces %s", shared_libs_soname);
     NativeBridgeCallbacks *cb = get_callbacks();
     return cb && cb->linkNamespaces(from, to, shared_libs_soname);
 }
@@ -179,17 +221,17 @@ static void *native_bridge3_loadLibraryExt(const char *libpath,
                                            int flag,
                                            native_bridge_namespace_t *ns)
 {
-    LOGV("enter native_bridge3_loadLibraryExt %s, %d, %p", libpath, flag, ns);
+    ALOGV("enter native_bridge3_loadLibraryExt %s, %d, %p", libpath, flag, ns);
     NativeBridgeCallbacks *cb = get_callbacks();
     void *result = cb ? cb->loadLibraryExt(libpath, flag, ns) : nullptr;
 //  void *result = cb ? cb->loadLibrary(libpath, flag) : nullptr;
-    LOGV("native_bridge3_loadLibraryExt: %p", result);
+    ALOGV("native_bridge3_loadLibraryExt: %p", result);
     return result;
 }
 
 static native_bridge_namespace_t *native_bridge4_getVendorNamespace()
 {
-    LOGV("enter native_bridge4_getVendorNamespace");
+    ALOGV("enter native_bridge4_getVendorNamespace");
     NativeBridgeCallbacks *cb = get_callbacks();
     return cb ? cb->getVendorNamespace() : nullptr;
 }
diff --git a/nativebridge/src/libnb.map b/nativebridge/src/libnb.map
new file mode 100644
index 0000000..9ac530a
--- /dev/null
+++ b/nativebridge/src/libnb.map
@@ -0,0 +1,7 @@
+LIBC_PLATFORM {
+  global:
+    android_get_application_target_sdk_version;
+    android_set_application_target_sdk_version;
+    android_get_exported_namespace;
+    android_update_LD_LIBRARY_PATH;
+};
-- 
2.21.0

